#!/usr/bin/ruby
#
#--
# Webyast framework
#
# Copyright (C) 2009, 2010 Novell, Inc. 
#   This library is free software; you can redistribute it and/or modify
# it only under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation. 
#
#   This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more 
# details. 
#
#   You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software 
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#++
#
# grantwebyastrights
#
# show, grant and revoke policies for WebYaST
#
# run: grantwebyastrights
#

require 'fileutils'
require 'getoptlong'
require 'rubygems'
require 'polkit1'

$debug = 0

POLKIT_SECTION = "55-webyast.d"

def usage why
  STDERR.puts why
  STDERR.puts ""
  STDERR.puts "Usage: grantwebyastrights --user <user> --action (show|grant|revoke) [--policy <policy>]"
  STDERR.puts "NOTE: This program should be run by user root"
  STDERR.puts ""
  STDERR.puts ""
  STDERR.puts "In order to show all possible permissions use:"
  STDERR.puts "pkaction"
  exit 1
end

options = GetoptLong.new(
  [ "--user",   GetoptLong::REQUIRED_ARGUMENT ],
  [ "--debug",  GetoptLong::OPTIONAL_ARGUMENT ],
  [ "--policy", GetoptLong::OPTIONAL_ARGUMENT ],
  [ "--action", GetoptLong::REQUIRED_ARGUMENT ]
)

user = nil
action = nil
single_policy = nil

begin
  options.each do |opt, arg|
    case opt
    when "--user": user = arg
    when "--action": action = arg
    when "--policy": single_policy = arg
    when "--debug": $debug += 1
    end
  end
rescue GetoptLong::InvalidOption => o
  usage "Invalid option #{o}"
end

$debug = nil if $debug == 0

usage "excessive arguments"  unless ARGV.empty?
usage "user parameter missing" unless user
usage "action parameter (show|grant|revoke) missing" unless action

SuseString = "org.opensuse.yast"

def webyast_perm?(perm)
  return (perm.include? SuseString) && (not perm.include? ".scr")
end

def granted_perms(user)
  perms = webyast_perms
  perms.reject! { |perm| 
    PolKit1::polkit1_check(perm, user) == :no }
  return perms
end

def webyast_perms
  # this is a reimplementation of `pkaction`, because it relies on d-bus and does not work
  # while building an appliane image
  perms = `grep 'action id' /usr/share/polkit-1/actions/* |sed 's/^.*action id="\\(.*\\)".*$/\\1/'`
  perms = perms.split "\n"
  perms.reject! { |perm| not webyast_perm?(perm) }
  return perms
end

begin
  case action
  when "grant" then
    unless single_policy == nil
      STDOUT.puts "granting: #{single_policy}"
      PolKit1::polkit1_write(POLKIT_SECTION, single_policy, true, user)
    else
      # go through all webyast perms, checking granted permissions does not work
      # well during build
      # polkit1_write makes sure not to grant a permission multiple times itself
      webyast_perms.each do |policy|
        STDOUT.puts "granting: #{policy}"
        PolKit1::polkit1_write(POLKIT_SECTION, policy, true, user)
      end
    end
  when "show"
    unless single_policy == nil
      STDOUT.puts single_policy if PolKit1::polkit1_check(single_policy, user) == :yes 
    else
      STDOUT.puts granted_perms(user).join("\n")
    end
  when "revoke"
    unless single_policy == nil
      STDOUT.puts "revoking: #{single_policy}"
      PolKit1::polkit1_write(POLKIT_SECTION, single_policy, false, user)
    else
      granted = granted_perms user
      granted.each do |policy|
        STDOUT.puts "revoking: #{policy}"
        PolKit1::polkit1_write(POLKIT_SECTION, policy, false, user)
      end
    end
  end
rescue Exception => e
  STDERR.puts e.message
  Process.exit! 1
end
