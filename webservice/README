==== yast2-webservice REST Interface ====
-----------------------------------------

=== General ===
---------------
Yast2-webservice provides an interface to YaST environment of the
concerning host machine. This service is running with an installed
webserver (e.g. lighthttp) and provides an API which is based on
the REST (Representational state transfer) architecture.
Please have a look to 
http://en.wikipedia.org/wiki/Representational_State_Transfer
for more information about REST.

E.g.  getting or setting the systemtime you can use

http://<name_of_the_host>/systemtime/currenttime

In order to identify if this value has to be set or has to be get
the HTTP protocol has four mothods:

GET    - Retrive a value 
PUT    - Overwrite a value
POST   - Create a new value.
DELETE - Delete a value. E.g. delete a user account

=== General Structure of the HTTP Requests ===
----------------------------------------------

Information can be get/set in 3 different formats:

http://<name_of_the_host>/systemtime
Returns the systemtime in HTML format. Calling this URL not via a 
browser the values will be retunred in XML format.

http://<name_of_the_host>/systemtime.xml
Returns the systemtime in XML format

http://<name_of_the_host>/systemtime.json
Returns the systemtime in JSON format

== GET ==
---------

Infomation can be get in a block or each entry of the block can be get
in an extra HTTP call:

http://<name_of_the_host>/systemtime.xml

returns

<systemtime>
<currenttime type="datetime">2008-09-10T17:13:37Z</currenttime>
<is_utc type="boolean">false</is_utc>
<timezone>Europe/Berlin</timezone>
</systemtime>

whereas 

http://0.0.0.0:3001/systemtime/timezone.xml

returns

<systemtime>
<currenttime type="datetime" nil="true"/>
<is_utc type="boolean" nil="true"/>
<timezone>Europe/Berlin</timezone>
</systemtime>

So only the required value has been set in the return value.

Get calls can be generated on the command line with the call:

curl -X GET http://0.0.0.0:3001/systemtime/timezone.xml

== PUT ==
---------

Put requests are taken for OVERWRITING existing values.
Multi values can be overwritten at once in a block or each entry of the block
can be set explicity in an extra HTTP call:

http://<name_of_the_host>/language with a block of XML data

<?xml version="1.0" encoding="UTF-8"?>
<language>
  <firstLanguage>de_DE</firstLanguage>
  <secondLanguages>en_US,zu_ZA</secondLanguages>
</language>

whereas 

http://0.0.0.0:3001/systemtime/language/secondLanguages with a single XML value

<?xml version="1.0" encoding="UTF-8"?>
<language>
  <secondLanguages>en_US</secondLanguages>
</language>

So only the required value has been set.

Note: Also HTML and JSON format is a valid format for values which have to be changed.

Put calls can be generated on the command line with the call:

curl -v -H "Content-Type: application/xml; charset=utf-8" -T <data-file> http://0.0.0.0:3001/systemtime/language/secondLanguages

== POST ==
----------

Post requests are used for creating new entries e.g. adding a new user account:

http://0.0.0.0:3001/users with the XML values:

<?xml version="1.0" encoding="UTF-8"?>
<user>
  <defaultGroup>users</defaultGroup>
  <fullName>tux2 tux2</fullName>
  <groups>users</groups>
  <homeDirectory>/home/tux2</homeDirectory>
  <loginName>tux2</loginName>
  <loginShell>/bin/bash</loginShell>
  <noHome type="boolean">false</noHome>
  <password>tuxtux</password>
  <uid>1002</uid>
</user>


Post calls can be generated on the command line with the call:

curl -X POST -v -H "Content-Type: application/xml; charset=utf-8" -T <data-file> http://0.0.0.0:3001/users

(<data-file> is a file which contains the XML values described above)

Note: Also HTML and JSON format is a valid format for values which have to be created.

== DELETE ==
------------

Delete requests are used for deleting entries e.g. an user account:

http://0.0.0.0:3001/users/tux2

Post calls can be generated on the command line with the call:

curl -X DELETE http://0.0.0.0:3001/users/tux2

=== YaST webservice API ===
---------------------------

== <hostname>/services ==
-------------------------
Managing system services like cron, smbfs, gpm, sshd, random, cups, ntp

GET <hostname>/services

returns:

<hash> 
  <service>
    <link>smbfs</link>
    <path>/etc/init.d/smbfs</path>
    <commands>
      <link>run</link>
       <link>stop</link>
       <link>status</link>
       <link>restart</link>
     </commands>
  </service>
  <service>
    <link>sshd</link>
    <path>/etc/init.d/sshd</path>
    <commands>
      <link>start</link>
      <link>stop</link>
      <link>status</link>
      <link>try-restart</link>
      <link>restart</link>
      <link>force-reload</link>
      <link>reload</link>
      <link>probe</link>
    </commands>
  </service>
  <service>
...
  </service>
</hash> 

== <hostname>/services/<servicename> ==
---------------------------------------

GET <hostname>/services/smbfs

returns

<hash> 
  <service>
    <link>smbfs</link>
    <path>/etc/init.d/smbfs</path>
    <commands>
      <link>run</link>
       <link>stop</link>
       <link>status</link>
       <link>restart</link>
     </commands>
  </service>
</hash> 

== <hostname>/services/<servicename>/<command> ==
-------------------------------------------------

PUT <hostname>/services/ntp/restart

== <hostname>/services/ntp/config ==
------------------------------------

GET <hostname>/services/ntp/config 

returns

<config_ntp>
  <enabled type="boolean">true</enabled>
  <manual_server></manual_server>
  <use_random_server type="boolean">true</use_random_server>
</config_ntp>

enabled:           the service will be automatically enabled while booting
manual_server:     user selected ntp server
use_random_server: server will be selected from pool.ntp.org

PUT <hostname>/services/ntp/config 

Writes ntp settings to the system. The given parameters are the same as the
returned values of the GET request.

Note: Each single value can be get or set explicity.

e.G. GET <hostname>/services/ntp/config/enabled returns this value only.

== <hostname>/systemtime ==
------------------------------------
Managing time, timezone,....

GET <hostname>/systemtime

returns

<systemtime>
  <currenttime type="datetime">2008-09-11T11:29:21Z</currenttime>
  <is_utc type="boolean">false</is_utc>
  <timezone>Europe/Berlin</timezone>
</systemtime>

GET <hostname>/systemtime

Writes time settings to the system. The given parameters are the same as the
returned values of the GET request.

Note: Each single value can be get or set explicity.

e.G. GET <hostname>/systemtime/timezone returns this value only.


