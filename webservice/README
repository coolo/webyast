==== yast2-webservice REST Interface ====
-----------------------------------------

=== General ===
---------------
Yast2-webservice provides an interface to the YaST environment of the
concerning host machine. This service is running with an installed
webserver (e.g. lighthttp) and provides an API which is based on
the REST (Representational state transfer) architecture.
Please have a look to 
http://en.wikipedia.org/wiki/Representational_State_Transfer
for more information about REST.

E.g. in order to get or set the systemtime you can use the HTTP URL:

http://<name_of_the_host>/systemtime/currenttime

In order to identify if this value has to be set or has to be get
the HTTP protocol has four methods:

GET    - Retrieve a value 
PUT    - Overwrite a value
POST   - Create a new value.
DELETE - Delete a value. E.g. delete a user account

=== General Structure of the HTTP Requests ===
----------------------------------------------

Information can be get/set in/with 3 different formats:

http://<name_of_the_host>/systemtime
Returns the systemtime in HTML format. Calling this URL not via a 
browser the values will be retunred in XML format.

http://<name_of_the_host>/systemtime.xml
Returns the systemtime in XML format

http://<name_of_the_host>/systemtime.json
Returns the systemtime in JSON format

== GET ==
---------

Information can be get in a block or each entry of the block can be get
in an extra HTTP call:

GET http://<name_of_the_host>/systemtime.xml

returns

<systemtime>
<currenttime type="datetime">2008-09-10T17:13:37Z</currenttime>
<is_utc type="boolean">false</is_utc>
<timezone>Europe/Berlin</timezone>
</systemtime>

whereas 

GET http://0.0.0.0:3001/systemtime/timezone.xml

returns

<systemtime>
<currenttime type="datetime" nil="true"/>
<is_utc type="boolean" nil="true"/>
<timezone>Europe/Berlin</timezone>
</systemtime>

So, only the required value has been set in the return value.

GET calls can be generated on the command line with the call:

curl -X GET http://0.0.0.0:3001/systemtime/timezone.xml

== PUT ==
---------

Put requests are taken for OVERWRITING existing values.
Multi values can be overwritten at once in a block or each entry of the block
can be set explicit in an extra HTTP call:

PUT http://<name_of_the_host>/language with a block of XML data

<?xml version="1.0" encoding="UTF-8"?>
<language>
  <firstLanguage>de_DE</firstLanguage>
  <secondLanguages>en_US,zu_ZA</secondLanguages>
</language>

whereas 

PUT http://0.0.0.0:3001/systemtime/language/secondLanguages with a single XML value

<?xml version="1.0" encoding="UTF-8"?>
<language>
  <secondLanguages>en_US</secondLanguages>
</language>

So only the required value has been set.

Note: Also HTML and JSON format is a valid format for values which have to be changed.

Put calls can be generated on the command line with the call:

curl -v -H "Content-Type: application/xml; charset=utf-8" -T <data-file> http://0.0.0.0:3001/systemtime/language/secondLanguages.xml

== POST ==
----------

Post requests are used for creating new entries e.g. adding a new user account:

POST http://0.0.0.0:3001/users.xml with the XML values:

<?xml version="1.0" encoding="UTF-8"?>
<user>
  <defaultGroup>users</defaultGroup>
  <fullName>tux2 tux2</fullName>
  <groups>users</groups>
  <homeDirectory>/home/tux2</homeDirectory>
  <loginName>tux2</loginName>
  <loginShell>/bin/bash</loginShell>
  <noHome type="boolean">false</noHome>
  <password>tuxtux</password>
  <uid>1002</uid>
</user>


POST calls can be generated on the command line with the call:

curl -X POST -v -H "Content-Type: application/xml; charset=utf-8" -T <data-file> http://0.0.0.0:3001/users.xml

(<data-file> is a file which contains the XML values described above)

Note: Also HTML and JSON format is a valid format for values which have to be created.

== DELETE ==
------------

Delete requests are used for deleting entries e.g. an user account:

DELETE http://0.0.0.0:3001/users/tux2

DELETE calls can be generated on the command line with the call:

curl -X DELETE http://0.0.0.0:3001/users/tux2

=== YaST webservice API ===
---------------------------

== <hostname>/services ==
-------------------------
Managing system services like cron, smbfs, gpm, sshd, random, cups, ntp

GET <hostname>/services.xml

returns:

<hash> 
  <service>
    <link>smbfs</link>
    <path>/etc/init.d/smbfs</path>
    <commands>
      <link>run</link>
       <link>stop</link>
       <link>status</link>
       <link>restart</link>
     </commands>
  </service>
  <service>
    <link>sshd</link>
    <path>/etc/init.d/sshd</path>
    <commands>
      <link>start</link>
      <link>stop</link>
      <link>status</link>
      <link>try-restart</link>
      <link>restart</link>
      <link>force-reload</link>
      <link>reload</link>
      <link>probe</link>
    </commands>
  </service>
  <service>
...
  </service>
</hash> 

== <hostname>/services/<servicename> ==
---------------------------------------

GET <hostname>/services/smbfs.xml

returns

<hash> 
  <service>
    <link>smbfs</link>
    <path>/etc/init.d/smbfs</path>
    <commands>
      <link>run</link>
       <link>stop</link>
       <link>status</link>
       <link>restart</link>
     </commands>
  </service>
</hash> 

== <hostname>/services/<servicename>/commands/<command> ==
----------------------------------------------------------

PUT <hostname>/services/ntp/commands/restart.xml

== <hostname>/services/ntp/config ==
------------------------------------

GET <hostname>/services/ntp/config.xml

returns

<config_ntp>
  <enabled type="boolean">true</enabled>
  <manual_server></manual_server>
  <use_random_server type="boolean">true</use_random_server>
</config_ntp>

enabled:           the service will be automatically enabled while booting
manual_server:     user selected ntp server
use_random_server: server will be selected from pool.ntp.org

PUT <hostname>/services/ntp/config.xml

Writes ntp settings to the system. The given parameters are the same as the
returned values of the GET request.

Note: Each single value can be get or set explicit.

e.G. GET <hostname>/services/ntp/config/enabled.xml returns this value only.

== <hostname>/systemtime ==
---------------------------
Managing time, timezone,....

GET <hostname>/systemtime.xml

returns

<systemtime>
  <currenttime type="datetime">2008-09-11T11:29:21Z</currenttime>
  <is_utc type="boolean">false</is_utc>
  <timezone>Europe/Berlin</timezone>
</systemtime>

GET <hostname>/systemtime.xml

Writes time settings to the system. The given parameters are the same as the
returned values of the GET request.

Note: Each single value can be get or set explicit.

e.g. GET <hostname>/systemtime/timezone.xml returns this value only.

== <hostname>/language ==
-------------------------

Managing language settings.

GET <hostname>/language.xml

returns

<language>
  <firstLanguage>de_DE</firstLanguage>
  <secondLanguages>en_US</secondLanguages>
  <available>af_ZA (Afrikaans)ar_EG (Arabic)bg_BG (Bulgarian)bn_BD (Bengali)bs_BA (Bosanski)ca_ES (Catala)cs_CZ (Cestina)cy_GB (Cymraeg)da_DK (Dansk)de_DE (Deutsch)el_GR (Greek)en_GB (English (UK))en_US (English (US))es_ES (Espanol)et_EE (Eesti)fi_FI (Suomi)fr_FR (Francais)gu_IN (Gujarati)he_IL (Ivrit)hi_IN (Hindi)hr_HR (Hrvatski)hu_HU (Magyar)id_ID (Bahasa Indonesia)it_IT (Italiano)ja_JP (Japanese)km_KH (Khmer)ko_KR (Korean)lt_LT (Lithuanian)mk_MK (Makedonski)mr_IN (Marathi)nb_NO (Norsk)nl_NL (Nederlands)pa_IN (Punjabi)pl_PL (Polski)pt_BR (Portugues brasileiro)pt_PT (Portugues)ro_RO (Romana)ru_RU (Russian)si_LK (Sinhala)sk_SK (Slovencina)sl_SI (Slovenscina)sr_CS (Srpski)sv_SE (Svenska)ta_IN (Tamil)th_TH (phasa thai)tr_TR (Turkce)uk_UA (Ukrainian)vi_VN (Vietnamese)wa_BE (Walon)xh_ZA (isiXhosa)zh_CN (Simplified Chinese)zh_TW (Traditional Chinese (Taiwan))zu_ZA (isiZulu)</available>
</language>

firstLanguage:   primary language
secondLanguages: a list of languages separeted by commas
available:       languages which are available on the system


PUT <hostname>/language.xml with values: 

<language>
  <firstLanguage>de_DE</firstLanguage>
  <secondLanguages>en_US,zu_ZA</secondLanguages>
</language>

Note: Each single value can be get or set explicit.

e.g. GET <hostname>/language/available.xml returns the list of available languages only.

== <hostname>/users ==
----------------------

User management like create/edit/delete a user login or exporting SSH-keys.

GET <hostname>/users.xml

returns 

<users type="array">
  <user>
    <loginName>nnw</loginName>
  </user>
  <user>
    <loginName>tux</loginName>
  </user>
  <user>
    <loginName>tux2</loginName>
  </user>
</users>

There are some other tags which are nil cause they have not been evaluated while this run. 
It would take too much time to get these values of e.g. all ldap users of a big company.
If you want more information about an user just call:

== <hostname>/users/<loginname> ==
----------------------------------
This call returns additional information about an user account.

GET <hostname>/users/tux.xml returns

<user>
  <defaultGroup>users</defaultGroup>
  <fullName>tux tux</fullName>
  <groups>users</groups>
  <homeDirectory>/home/tux</homeDirectory>
  <loginName>tux</loginName>
  <loginShell>/bin/bash</loginShell>
  <uid>1001</uid>
</user>

PUT <hostname>/users/tux.xml update the user account of tux

<user>
  <defaultGroup>users</defaultGroup>
  <fullName>tux2 tux2</fullName>
  <groups>users</groups>
  <homeDirectory>/home/tux2</homeDirectory>
  <loginShell>/bin/bash</loginShell>
  <password>tuxtux</password>
  <newUid>1002</newUid>
  <newLoginName>tux2</newLoginName>
</user>

Not all tags are required. So, you have to "tag" changed values only.

Additional optional tags:

ldapPassword: Ldap password if the user account will created with Ldap.
type:         valid values: local, system, nis, ldap

Note: Each single value can be get or set explicit.

e.g. GET <hostname>/users/tux/uid.xml returns the UID of of the user tux only.

POST <hostname>/users.xml creates a new user account with the values:

<user>
  <defaultGroup>users</defaultGroup>
  <fullName>tux2 tux2</fullName>
  <groups>users</groups>
  <homeDirectory>/home/tux2</homeDirectory>
  <loginName>tux2</loginName>
  <loginShell>/bin/bash</loginShell>
  <noHome type="boolean">false</noHome>
  <password>tuxtux</password>
  <uid>1002</uid>
</user>

noHome:  do not create the home directory

Additional optional tags:

ldapPassword: Ldap password if the user account will created with Ldap.
type:         valid values: local, system, nis, ldap

DELETE <hostname>/users/tux delete the user account tux

== <hostname>/users/<loginname>/sshkey ==
-----------------------------------------
Exporting a SSH key to the home directory of the given user.

PUT <hostname>/users/<loginname>/sshkey.xml with the value:

<user>
  <sshkey>This should be the key</sshkey>
</user>

== <hostname>/patch_updates ==
------------------------------
Evaluate and install needed patches.

GET <hostname>/patch_updates.xml returns

<patch-updates type="array">
  <patch-update>
    <arch>noarch</arch>
    <kind>important</kind>
    <name>PackageKit</name>
    <repo>openSUSE-11.0-Updates</repo>
    <resolvableId type="integer">139</resolvableId>
    <summary></summary>
  </patch-update>
  <patch-update>
    <arch>noarch</arch>
    <kind>important</kind>
    <name>zypper</name>
    <repo>openSUSE-11.0-Updates</repo>
    <resolvableId type="integer">114</resolvableId>
    <summary></summary>
  </patch-update>
  <patch-update>
    <arch>noarch</arch>
    <kind>important</kind>
    <name>yast2-ncurses-pkg</name>
    <repo>openSUSE-11.0-Updates</repo>
    <resolvableId type="integer">83</resolvableId>
    <summary></summary>
  </patch-update>
</patch-updates>

arch:         Architecture
kind:         important(recommded), security, low(optional)
name:         Patchname
repo:         Concerning repository
resolvableId: internal patch ID
summary:      description

POST <hostname>/patch_updates/<resolvableId> Install the patch with the internal patch ID.

== <hostname>/yast_modules ==
-----------------------------
Almost each YaST module has a command line interface which can be used with HTTP/REST.

GET <hostname>/yast_modules.xml returns a list of all available YaST modules

<hash>
  <module>
    <id>dns-server</id>
  </module>
  <module>
    <id>update</id>
  </module>
  <module>
    <id>remote</id>
  </module>
  <module>
    <id>dirinstall</id>
  </module>
  <module>
    <id>restore</id>
  </module>
  <module>
    ....
  </module>
<hash>


== <hostname>/yast_modules/<yast_module> ==
-------------------------------------------
Evaluate all possible commands and options of a YaST module.

GET <hostname>/yast_modules/nis.xml returns all commands and options of the nis module

<module>
  <id>nis</id>
  <commands>
    <command>
      <name>disable</name>
      <help>Disable the NIS client</help>
      <options/>
    </command>
    <command>
      <name>find</name>
      <help>Show available NIS servers for given domain</help>
      <options>
        <option>
          <name>domain</name>
          <type>string</type>
          <help>NIS domain</help>
        </option>
      </options>
    </command>
    <command>
      <name>enable</name>
      <help>Enable your machine as NIS client</help>
      <options>
        <option>
          <name>automounter</name>
          <type>enum</type>
          <help>Start or stop automounter</help>
        </option>
        <option>
          <name>domain</name>
          <type>string</type>
          <help>NIS domain</help>
        </option>
        <option>
          <name>server</name>
          <type>string</type>
          <help>NIS server name or address</help>
        </option>
        <option>
          <name>broadcast</name>
          <type>enum</type>
          <help>Set or unset broadcast search</help>
        </option>
      </options>
    </command>
    <command>
      <name>configure</name>
      <help>Change the global settings of NIS client</help>
      <options>
        <option>
          <name>broadcast</name>
          <type>enum</type>
          <help>Set or unset broadcast search</help>
        </option>
        <option>
          <name>automounter</name>
          <type>enum</type>
          <help>Start or stop automounter</help>
        </option>
        <option>
          <name>domain</name>
          <type>string</type>
          <help>NIS domain</help>
        </option>
        <option>
          <name>server</name>
          <type>string</type>
          <help>NIS server name or address</help>
        </option>
      </options>
    </command>
    <command>
      <name>summary</name>
      <help>Configuration summary of NIS client</help>
      <options/>
    </command>
  </commands>
</module>

POST <hostname>/yast_modules/nis.xml run the nis module with the commands:

<hash>
  <command>find</command>
  <domain>suse.de</domain>
</hash>

This returns:

<hash>
  <stdout></stdout>
  <exit type="integer">16</exit>
  <stderr>10.10.0.1
10.10.0.10
</stderr>
</hash>


