Configuration
==============

All configurations should be done in the POST install section of the package.

After you have installed the package an own lighttpd server with the 
YaST-Webservice has been configured which is running with the 
system account "yastwebd".
This HTTP server is configured as "localhost" only which has the port 8080.
This can be changed in the file /etc/yastwebd/lighttpd.conf

So, you can start the server with: "rcyastwebd start"

Use the webbrowser with the URL http://localhost:8080

Login as "root". While the package installation all access rights has been
granted to "root". For another users you will have to grant permission as
descibed in the following sections:


API Policies
============
Each YaST Webservice call has concerning access permissions which can be defined for each user.

These permissions are handled by PolicyKit in the file:

/usr/share/PolicyKit/policy/org.opensuse.yast.webservice.policy

If you are getting a permission error while using the API just have a look to the webserver logfile
in order to get the information which permissions are missed:

Action: org.opensuse.yast.webservice.run-yastmodule User: schubi Result: no
Action: org.opensuse.yast.webservice.run-yastmodule-lan User: schubi Result: yes

These permissions can be set with the call "polkit-auth" like:

polkit-auth --user schubi --grant org.opensuse.yast.webservice.run-yastmodule-lan

Or can be reset by:

polkit-auth --user schubi --revoke org.opensuse.yast.webservice.run-yastmodule-lan

In order to cleanup or to grant ALL permissions you can use the ruby script policyKit-rights.rb
delivered with this package:

   Usage: policyKit-right.rb --user <user> --action (show|grant|revoke)
   NOTE: This programm should be run by user root

   This call grant/revoke ALL permissions for the YaST Webservice.
   In order to grant/revoke single rights use:
   polkit-auth --user <user> (--grant|-revoke) <policyname>

   In order to show all possible permissions use:
   polkit-action


Roles
=====
In order to avoid declaring permissions for each user there is the possibility to define roles for
each user like: administrator, secretary, ...

The definition which roles belong to a user are defined in file /etc/yast_user_roles:

#
# file : /etc/yast_user_roles
#
# This file describes roles of a user accounts for the YaST Webservice
# "user accounts": System account which is accessible e.g. via PAM.
# "roles"        : Describes user accounts for which policies have
#                  been generated
#
# Format: <user>   <role 1>,<role 2>,...<role n>
#

So, you have to generate a system user e.g. "secretary" and define special right for
that user (described above).
For getting "secretary" rights you have to add the concerning user in the file 
/etc/yast_user_roles only.

This is a very simple way to store this information. Much more elegant would be to
store it to another place e.g. via ldap. Make a proposal :-)


Starting YaST webservice with webrick (not required)
====================================================

ROR provides an own webserver called webrick. It is nice for testing but
should not used for "realtime".

Please start this server with the root account.

Configuration of Webserver rights
------------------------------------
These rights are needed for the communication between your webserver and the
SCR agent.

For testing you can grant all permissions to root by adding

- - - snip - - -

"http://hal.freedesktop.org/releases/PolicyKit/1.0/config.dtd">

<!-- See the manual page PolicyKit.conf(5) for file format -->

<config version="0.1">
<match user="root">
  <match action="org.opensuse.yast.scr.*">
      <return result="yes"/>
  </match>
</match> 
<match user="root">
  <match action="org.freedesktop.packagekit.system-update">
      <return result="yes"/>
  </match>
</match>
<match user="root">
  <match action="org.freedesktop.policykit.read">
      <return result="yes"/>
  </match>
</match>


</config>

- - - snip end - - -

to /etc/PolicyKit/PolicyKit.conf


starting
- - - - -

cd /etc/yastwebd/www/
script/server -p 3001

Logs are written to /etc/yastwebd/www/log

first test
- - - - - - 
Use the webbrowser with the URL http://0.0.0.0:3001

