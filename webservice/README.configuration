Configuration
==============

After you have installed this package you have to setup the database:

cd /srv/www/yast/
rake db:migrate

And install "session" with:

gem install session

-------------------------------------------------------------------------
DBUS
-------------------------------------------------------------------------

Add following entry (e.g. for using lightttp) in 
/etc/dbus-1/system.d/org.opensuse.yast.SCR.conf

<busconfig>
    <policy user="root">
        <allow own="org.opensuse.yast.SCR"/>
        <allow send_interface="org.opensuse.yast.SCR.Methods"/>
    </policy>
    <policy user="lighttpd">
        <allow own="org.opensuse.yast.SCR"/>
        <allow send_interface="org.opensuse.yast.SCR.Methods"/>
    </policy>
    <policy context="default">
        <deny own="org.opensuse.yast.SCR"/>
        <deny send_interface="org.opensuse.yast.SCR.Methods"/>
    </policy>
</busconfig>

-------------------------------------------------------------------------
PAM
-------------------------------------------------------------------------

Create a file /etc/pam.d/rpam with the entries:

#%PAM-1.0
auth     include        common-auth
account  include        common-account
password include        common-password
session  include        common-session


-------------------------------------------------------------------------
PolicyKit
-------------------------------------------------------------------------

Webserver rights
================
These rights are neede for the communication between your webserver and the
SCR agent.

For testing you can grant all permissions to you and lighttp by adding

- - - - - - -

"http://hal.freedesktop.org/releases/PolicyKit/1.0/config.dtd">

<!-- See the manual page PolicyKit.conf(5) for file format -->

<config version="0.1">
<match user="schubi|lighttpd">
  <match action="org.opensuse.yast.scr.*">
      <return result="yes"/>
  </match>
</match> 

</config>

- - - - - - -

to /etc/PolicyKit/PolicyKit.conf

Please exchange "schubi" by the requested user account with which 
you are running the web server.


API Policies
============
Each YaST Webservice call has concerning access permissions which can be defined for each user.

These permissions are handled by PolicyKit in the file:

/usr/share/PolicyKit/policy/org.opensuse.yast.webservice.policy

If you are getting a permission error while using the API just have a look to the webserver logfile
in order to get the information which permissions are missed:

Action: org.opensuse.yast.webservice.run-yastmodule User: schubi Result: no
Action: org.opensuse.yast.webservice.run-yastmodule-lan User: schubi Result: yes

These permissions can be set with the call "polkit-auth" like:

polkit-auth --user schubi --grant org.opensuse.yast.webservice.run-yastmodule-lan

Or can be reset by:

polkit-auth --user schubi --revoke org.opensuse.yast.webservice.run-yastmodule-lan

In order to cleanup or to grant ALL permissions you can use the ruby script policyKit-rights.rb
delivered with this package:

   Usage: policyKit-right.rb --user <user> --action (show|grant|revoke)
   NOTE: This programm should be run by user root

   This call grant/revoke ALL permissions for the YaST Webservice.
   In order to grant/revoke single rights use:
   polkit-auth --user <user> (--grant|-revoke) <policyname>

   In order to show all possible permissions use:
   polkit-action


Roles
=====
In order to avoid declaring permissions for each user there is the possibility to define roles for
each user like: administrator, secretary, ...

The definition which roles belong to a user are defined in file /etc/yast_user_roles:

#
# file : /etc/yast_user_roles
#
# This file describes roles of a user accounts for the YaST Webservice
# "user accounts": System account which is accessible e.g. via PAM.
# "roles"        : Describes user accounts for which policies have
#                  been generated
#
# Format: <user>   <role 1>,<role 2>,...<role n>
#

So, you have to generate a system user e.g. "secretary" and define special right for
that user (described above).
For getting "secretary" rights you have to add the concerning user in the file 
/etc/yast_user_roles only.

This is a very simple way to store this information. Much more elegant would be to
store it to another place e.g. via ldap. Make a proposal :-)



You can run the YaST webservice with two different web servers:

--------------------------------------------------------------------------
webrick
--------------------------------------------------------------------------
ROR provides an own webserver called webrick. It is nice for testing but
should not used for "realtime".

starting
- - - - -

cd /srv/www/yast
script/server -p 3001

Logs are written to /srv/www/yast/log

first test
- - - - - - 
Use the webbrowser with the URL http://0.0.0.0:3001

--------------------------------------------------------------------------
lighttpd
--------------------------------------------------------------------------
Lighttpd is a quite simple HTTP server which fulfill all requirements
for YaST-webservice. It has only the disadvantage that it does not run
"out of the box". So some changes in the configuration files are needed:

/etc/lighttpd/lighttpd.conf
- - - - - - - - - - - - - - -
AKTIVATE following entries

424c424
< include_shell "cat /etc/lighttpd/vhosts.d/*.conf"
---
> #include_shell "cat /etc/lighttpd/vhosts.d/*.conf"

/etc/lighttpd/modules.conf
- - - - - - - - - - - - - -
AKTIVATE following entries

48c48
<   "mod_rewrite",
---
> #  "mod_rewrite",
89c89
< include "conf.d/magnet.conf"
---
> #include "conf.d/magnet.conf"
132c132
< include "conf.d/fastcgi.conf"
---
> #include "conf.d/fastcgi.conf"


Start the server: rclighttpd start

Logs are written to /srv/www/yast/log

first test
- - - - - - 
Use the webbrowser with the URL http://<your_hostname>